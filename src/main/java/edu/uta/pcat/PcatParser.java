
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package edu.uta.pcat;

import scala.collection.immutable.*;
import scala.Tuple2;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class PcatParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public PcatParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public PcatParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public PcatParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\172\000\002\002\004\000\002\002\006\000\002\003" +
    "\003\000\002\003\004\000\002\004\006\000\002\004\005" +
    "\000\002\005\004\000\002\005\004\000\002\005\004\000" +
    "\002\006\004\000\002\006\003\000\002\007\004\000\002" +
    "\007\003\000\002\010\004\000\002\011\010\000\002\011" +
    "\007\000\002\011\007\000\002\011\006\000\002\012\005" +
    "\000\002\012\004\000\002\013\004\000\002\013\003\000" +
    "\002\014\006\000\002\015\005\000\002\015\004\000\002" +
    "\016\004\000\002\016\003\000\002\017\004\000\002\020" +
    "\010\000\002\020\007\000\002\021\003\000\002\022\004" +
    "\000\002\022\003\000\002\023\005\000\002\023\006\000" +
    "\002\023\005\000\002\024\006\000\002\025\005\000\002" +
    "\025\004\000\002\026\006\000\002\026\005\000\002\026" +
    "\004\000\002\027\006\000\002\027\005\000\002\030\005" +
    "\000\002\030\004\000\002\031\005\000\002\031\004\000" +
    "\002\032\003\000\002\033\004\000\002\034\004\000\002" +
    "\035\007\000\002\035\006\000\002\036\004\000\002\036" +
    "\003\000\002\037\006\000\002\037\005\000\002\037\010" +
    "\000\002\037\007\000\002\037\005\000\002\037\012\000" +
    "\002\037\011\000\002\037\011\000\002\037\010\000\002" +
    "\037\010\000\002\037\006\000\002\037\015\000\002\037" +
    "\014\000\002\037\004\000\002\037\005\000\002\037\004" +
    "\000\002\040\005\000\002\040\004\000\002\041\006\000" +
    "\002\041\005\000\002\041\004\000\002\042\003\000\002" +
    "\042\003\000\002\043\003\000\002\043\003\000\002\043" +
    "\005\000\002\043\004\000\002\043\004\000\002\043\005" +
    "\000\002\043\005\000\002\043\005\000\002\043\005\000" +
    "\002\043\005\000\002\043\005\000\002\043\005\000\002" +
    "\043\005\000\002\043\005\000\002\043\005\000\002\043" +
    "\005\000\002\043\005\000\002\043\005\000\002\043\005" +
    "\000\002\043\004\000\002\043\004\000\002\043\004\000" +
    "\002\044\003\000\002\044\006\000\002\044\005\000\002" +
    "\045\005\000\002\045\004\000\002\046\006\000\002\046" +
    "\005\000\002\046\004\000\002\047\007\000\002\047\006" +
    "\000\002\050\010\000\002\051\005\000\002\051\004\000" +
    "\002\052\004\000\002\052\003\000\002\054\005\000\002" +
    "\054\004\000\002\053\004\000\002\055\004\000\002\055" +
    "\003\000\002\056\003\000\002\056\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u011f\000\004\033\005\001\002\000\004\002\u0121\001" +
    "\002\000\004\024\006\001\002\000\012\012\013\032\011" +
    "\041\014\042\007\001\002\000\004\004\u010a\001\002\000" +
    "\004\061\u0109\001\002\000\004\004\343\001\002\000\012" +
    "\012\337\032\011\041\014\042\007\001\002\000\024\004" +
    "\057\021\052\022\053\023\056\025\055\034\050\036\062" +
    "\043\051\044\060\001\002\000\004\004\016\001\002\000" +
    "\012\012\uffff\032\uffff\041\uffff\042\uffff\001\002\000\004" +
    "\024\026\001\002\000\014\010\021\012\uffec\032\uffec\041" +
    "\uffec\042\uffec\001\002\000\012\012\ufffa\032\ufffa\041\ufffa" +
    "\042\ufffa\001\002\000\004\004\016\001\002\000\014\010" +
    "\023\012\uffed\032\uffed\041\uffed\042\uffed\001\002\000\004" +
    "\004\016\001\002\000\014\010\uffef\012\uffef\032\uffef\041" +
    "\uffef\042\uffef\001\002\000\014\010\uffee\012\uffee\032\uffee" +
    "\041\uffee\042\uffee\001\002\000\006\011\031\035\027\001" +
    "\002\000\004\004\036\001\002\000\004\061\035\001\002" +
    "\000\004\030\032\001\002\000\004\004\033\001\002\000" +
    "\012\024\uffe3\045\uffe3\061\uffe3\065\uffe3\001\002\000\004" +
    "\061\uffe0\001\002\000\014\010\uffeb\012\uffeb\032\uffeb\041" +
    "\uffeb\042\uffeb\001\002\000\004\060\045\001\002\000\006" +
    "\004\036\020\042\001\002\000\006\004\036\020\044\001" +
    "\002\000\006\004\uffe1\020\uffe1\001\002\000\004\061\uffde" +
    "\001\002\000\006\004\uffe2\020\uffe2\001\002\000\004\061" +
    "\uffdf\001\002\000\004\004\033\001\002\000\004\061\047" +
    "\001\002\000\006\004\uffdd\020\uffdd\001\002\000\004\064" +
    "\323\001\002\000\016\004\074\006\100\007\071\027\075" +
    "\047\070\064\076\001\002\000\004\061\315\001\002\000" +
    "\004\004\275\001\002\000\026\004\057\020\274\021\052" +
    "\022\053\023\056\025\055\034\050\036\062\043\051\044" +
    "\060\001\002\000\024\004\057\021\052\022\053\023\056" +
    "\025\055\034\050\036\062\043\051\044\060\001\002\000" +
    "\016\004\074\006\100\007\071\027\075\047\070\064\076" +
    "\001\002\000\012\045\uff9d\063\uff9d\064\144\066\uff9d\001" +
    "\002\000\004\064\221\001\002\000\032\004\uffcb\016\uffcb" +
    "\017\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\025\uffcb\034" +
    "\uffcb\036\uffcb\043\uffcb\044\uffcb\001\002\000\020\004\074" +
    "\006\100\007\071\027\075\047\070\061\214\064\076\001" +
    "\002\000\010\045\065\063\066\066\064\001\002\000\016" +
    "\004\074\006\100\007\071\027\075\047\070\064\076\001" +
    "\002\000\016\004\074\006\100\007\071\027\075\047\070" +
    "\064\076\001\002\000\004\004\067\001\002\000\070\010" +
    "\uff9b\013\uff9b\014\uff9b\015\uff9b\026\uff9b\030\uff9b\031\uff9b" +
    "\037\uff9b\040\uff9b\045\uff9b\046\uff9b\047\uff9b\050\uff9b\051" +
    "\uff9b\052\uff9b\053\uff9b\054\uff9b\055\uff9b\056\uff9b\057\uff9b" +
    "\061\uff9b\062\uff9b\063\uff9b\065\uff9b\066\uff9b\067\uff9b\071" +
    "\uff9b\001\002\000\016\004\074\006\100\007\071\027\075" +
    "\047\070\064\076\001\002\000\062\010\uff88\013\uff88\014" +
    "\uff88\015\uff88\026\uff88\030\uff88\031\uff88\037\uff88\040\uff88" +
    "\046\uff88\047\uff88\050\uff88\051\uff88\052\uff88\053\uff88\054" +
    "\uff88\055\uff88\056\uff88\057\uff88\061\uff88\062\uff88\065\uff88" +
    "\067\uff88\071\uff88\001\002\000\062\010\uffb3\013\uffb3\014" +
    "\uffb3\015\uffb3\026\uffb3\030\uffb3\031\uffb3\037\uffb3\040\uffb3" +
    "\046\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3\054" +
    "\uffb3\055\uffb3\056\uffb3\057\uffb3\061\uffb3\062\uffb3\065\uffb3" +
    "\067\uffb3\071\uffb3\001\002\000\040\010\103\014\111\026" +
    "\105\031\117\046\110\047\102\050\114\051\104\052\115" +
    "\053\120\054\112\055\116\056\107\057\106\061\210\001" +
    "\002\000\072\010\uff9d\013\uff9d\014\uff9d\015\uff9d\026\uff9d" +
    "\030\uff9d\031\uff9d\037\uff9d\040\uff9d\046\uff9d\047\uff9d\050" +
    "\uff9d\051\uff9d\052\uff9d\053\uff9d\054\uff9d\055\uff9d\056\uff9d" +
    "\057\uff9d\061\uff9d\062\uff9d\063\uff9d\064\144\065\uff9d\066" +
    "\uff9d\067\uff9d\070\140\071\uff9d\001\002\000\016\004\074" +
    "\006\100\007\071\027\075\047\070\064\076\001\002\000" +
    "\016\004\074\006\100\007\071\027\075\047\070\064\076" +
    "\001\002\000\066\010\uffb2\013\uffb2\014\uffb2\015\uffb2\026" +
    "\uffb2\030\uffb2\031\uffb2\037\uffb2\040\uffb2\046\uffb2\047\uffb2" +
    "\050\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2\055\uffb2\056" +
    "\uffb2\057\uffb2\061\uffb2\062\uffb2\063\066\065\uffb2\066\064" +
    "\067\uffb2\071\uffb2\001\002\000\062\010\uff89\013\uff89\014" +
    "\uff89\015\uff89\026\uff89\030\uff89\031\uff89\037\uff89\040\uff89" +
    "\046\uff89\047\uff89\050\uff89\051\uff89\052\uff89\053\uff89\054" +
    "\uff89\055\uff89\056\uff89\057\uff89\061\uff89\062\uff89\065\uff89" +
    "\067\uff89\071\uff89\001\002\000\040\010\103\014\111\026" +
    "\105\031\117\046\110\047\102\050\114\051\104\052\115" +
    "\053\120\054\112\055\116\056\107\057\106\065\113\001" +
    "\002\000\016\004\074\006\100\007\071\027\075\047\070" +
    "\064\076\001\002\000\016\004\074\006\100\007\071\027" +
    "\075\047\070\064\076\001\002\000\016\004\074\006\100" +
    "\007\071\027\075\047\070\064\076\001\002\000\016\004" +
    "\074\006\100\007\071\027\075\047\070\064\076\001\002" +
    "\000\016\004\074\006\100\007\071\027\075\047\070\064" +
    "\076\001\002\000\016\004\074\006\100\007\071\027\075" +
    "\047\070\064\076\001\002\000\016\004\074\006\100\007" +
    "\071\027\075\047\070\064\076\001\002\000\016\004\074" +
    "\006\100\007\071\027\075\047\070\064\076\001\002\000" +
    "\016\004\074\006\100\007\071\027\075\047\070\064\076" +
    "\001\002\000\062\010\uffb1\013\uffb1\014\uffb1\015\uffb1\026" +
    "\uffb1\030\uffb1\031\uffb1\037\uffb1\040\uffb1\046\uffb1\047\uffb1" +
    "\050\uffb1\051\uffb1\052\uffb1\053\uffb1\054\uffb1\055\uffb1\056" +
    "\uffb1\057\uffb1\061\uffb1\062\uffb1\065\uffb1\067\uffb1\071\uffb1" +
    "\001\002\000\016\004\074\006\100\007\071\027\075\047" +
    "\070\064\076\001\002\000\016\004\074\006\100\007\071" +
    "\027\075\047\070\064\076\001\002\000\016\004\074\006" +
    "\100\007\071\027\075\047\070\064\076\001\002\000\016" +
    "\004\074\006\100\007\071\027\075\047\070\064\076\001" +
    "\002\000\016\004\074\006\100\007\071\027\075\047\070" +
    "\064\076\001\002\000\062\010\uffa2\013\uffa2\014\111\015" +
    "\uffa2\026\105\030\uffa2\031\uffa2\037\uffa2\040\uffa2\046\110" +
    "\047\102\050\114\051\104\052\uffa2\053\uffa2\054\uffa2\055" +
    "\uffa2\056\uffa2\057\uffa2\061\uffa2\062\uffa2\065\uffa2\067\uffa2" +
    "\071\uffa2\001\002\000\062\010\103\013\uffa8\014\111\015" +
    "\uffa8\026\105\030\uffa8\031\117\037\uffa8\040\uffa8\046\110" +
    "\047\102\050\114\051\104\052\115\053\120\054\112\055" +
    "\116\056\107\057\106\061\uffa8\062\uffa8\065\uffa8\067\uffa8" +
    "\071\uffa8\001\002\000\062\010\uffa3\013\uffa3\014\111\015" +
    "\uffa3\026\105\030\uffa3\031\uffa3\037\uffa3\040\uffa3\046\110" +
    "\047\102\050\114\051\104\052\uffa3\053\uffa3\054\uffa3\055" +
    "\uffa3\056\uffa3\057\uffa3\061\uffa3\062\uffa3\065\uffa3\067\uffa3" +
    "\071\uffa3\001\002\000\062\010\uffa5\013\uffa5\014\111\015" +
    "\uffa5\026\105\030\uffa5\031\uffa5\037\uffa5\040\uffa5\046\110" +
    "\047\102\050\114\051\104\052\uffa5\053\uffa5\054\uffa5\055" +
    "\uffa5\056\uffa5\057\uffa5\061\uffa5\062\uffa5\065\uffa5\067\uffa5" +
    "\071\uffa5\001\002\000\062\010\uffac\013\uffac\014\uffac\015" +
    "\uffac\026\uffac\030\uffac\031\uffac\037\uffac\040\uffac\046\uffac" +
    "\047\uffac\050\uffac\051\uffac\052\uffac\053\uffac\054\uffac\055" +
    "\uffac\056\uffac\057\uffac\061\uffac\062\uffac\065\uffac\067\uffac" +
    "\071\uffac\001\002\000\062\010\uffa6\013\uffa6\014\111\015" +
    "\uffa6\026\105\030\uffa6\031\uffa6\037\uffa6\040\uffa6\046\110" +
    "\047\102\050\114\051\104\052\uffa6\053\uffa6\054\uffa6\055" +
    "\uffa6\056\uffa6\057\uffa6\061\uffa6\062\uffa6\065\uffa6\067\uffa6" +
    "\071\uffa6\001\002\000\062\010\uffaa\013\uffaa\014\uffaa\015" +
    "\uffaa\026\uffaa\030\uffaa\031\uffaa\037\uffaa\040\uffaa\046\uffaa" +
    "\047\uffaa\050\uffaa\051\uffaa\052\uffaa\053\uffaa\054\uffaa\055" +
    "\uffaa\056\uffaa\057\uffaa\061\uffaa\062\uffaa\065\uffaa\067\uffaa" +
    "\071\uffaa\001\002\000\062\010\uffae\013\uffae\014\111\015" +
    "\uffae\026\105\030\uffae\031\uffae\037\uffae\040\uffae\046\uffae" +
    "\047\uffae\050\114\051\104\052\uffae\053\uffae\054\uffae\055" +
    "\uffae\056\uffae\057\uffae\061\uffae\062\uffae\065\uffae\067\uffae" +
    "\071\uffae\001\002\000\062\010\uffa4\013\uffa4\014\111\015" +
    "\uffa4\026\105\030\uffa4\031\uffa4\037\uffa4\040\uffa4\046\110" +
    "\047\102\050\114\051\104\052\115\053\120\054\112\055" +
    "\116\056\uffa4\057\uffa4\061\uffa4\062\uffa4\065\uffa4\067\uffa4" +
    "\071\uffa4\001\002\000\062\010\uffa1\013\uffa1\014\111\015" +
    "\uffa1\026\105\030\uffa1\031\uffa1\037\uffa1\040\uffa1\046\110" +
    "\047\102\050\114\051\104\052\115\053\120\054\112\055" +
    "\116\056\uffa1\057\uffa1\061\uffa1\062\uffa1\065\uffa1\067\uffa1" +
    "\071\uffa1\001\002\000\062\010\uffa9\013\uffa9\014\uffa9\015" +
    "\uffa9\026\uffa9\030\uffa9\031\uffa9\037\uffa9\040\uffa9\046\uffa9" +
    "\047\uffa9\050\uffa9\051\uffa9\052\uffa9\053\uffa9\054\uffa9\055" +
    "\uffa9\056\uffa9\057\uffa9\061\uffa9\062\uffa9\065\uffa9\067\uffa9" +
    "\071\uffa9\001\002\000\062\010\uffab\013\uffab\014\uffab\015" +
    "\uffab\026\uffab\030\uffab\031\uffab\037\uffab\040\uffab\046\uffab" +
    "\047\uffab\050\uffab\051\uffab\052\uffab\053\uffab\054\uffab\055" +
    "\uffab\056\uffab\057\uffab\061\uffab\062\uffab\065\uffab\067\uffab" +
    "\071\uffab\001\002\000\062\010\103\013\uffa7\014\111\015" +
    "\uffa7\026\105\030\uffa7\031\uffa7\037\uffa7\040\uffa7\046\110" +
    "\047\102\050\114\051\104\052\115\053\120\054\112\055" +
    "\116\056\107\057\106\061\uffa7\062\uffa7\065\uffa7\067\uffa7" +
    "\071\uffa7\001\002\000\062\010\uffad\013\uffad\014\111\015" +
    "\uffad\026\105\030\uffad\031\uffad\037\uffad\040\uffad\046\uffad" +
    "\047\uffad\050\114\051\104\052\uffad\053\uffad\054\uffad\055" +
    "\uffad\056\uffad\057\uffad\061\uffad\062\uffad\065\uffad\067\uffad" +
    "\071\uffad\001\002\000\062\010\uffaf\013\uffaf\014\111\015" +
    "\uffaf\026\105\030\uffaf\031\uffaf\037\uffaf\040\uffaf\046\110" +
    "\047\102\050\114\051\104\052\115\053\120\054\112\055" +
    "\116\056\107\057\106\061\uffaf\062\uffaf\065\uffaf\067\uffaf" +
    "\071\uffaf\001\002\000\020\004\162\006\100\007\071\027" +
    "\075\047\070\064\076\071\157\001\002\000\062\010\uff9e" +
    "\013\uff9e\014\uff9e\015\uff9e\026\uff9e\030\uff9e\031\uff9e\037" +
    "\uff9e\040\uff9e\046\uff9e\047\uff9e\050\uff9e\051\uff9e\052\uff9e" +
    "\053\uff9e\054\uff9e\055\uff9e\056\uff9e\057\uff9e\061\uff9e\062" +
    "\uff9e\065\uff9e\067\uff9e\071\uff9e\001\002\000\062\010\uffa0" +
    "\013\uffa0\014\uffa0\015\uffa0\026\uffa0\030\uffa0\031\uffa0\037" +
    "\uffa0\040\uffa0\046\uffa0\047\uffa0\050\uffa0\051\uffa0\052\uffa0" +
    "\053\uffa0\054\uffa0\055\uffa0\056\uffa0\057\uffa0\061\uffa0\062" +
    "\uffa0\065\uffa0\067\uffa0\071\uffa0\001\002\000\062\010\uff9f" +
    "\013\uff9f\014\uff9f\015\uff9f\026\uff9f\030\uff9f\031\uff9f\037" +
    "\uff9f\040\uff9f\046\uff9f\047\uff9f\050\uff9f\051\uff9f\052\uff9f" +
    "\053\uff9f\054\uff9f\055\uff9f\056\uff9f\057\uff9f\061\uff9f\062" +
    "\uff9f\065\uff9f\067\uff9f\071\uff9f\001\002\000\020\004\074" +
    "\006\100\007\071\027\075\047\070\064\076\065\146\001" +
    "\002\000\042\010\103\014\111\026\105\031\117\046\110" +
    "\047\102\050\114\051\104\052\115\053\120\054\112\055" +
    "\116\056\107\057\106\062\147\065\150\001\002\000\062" +
    "\010\uff96\013\uff96\014\uff96\015\uff96\026\uff96\030\uff96\031" +
    "\uff96\037\uff96\040\uff96\046\uff96\047\uff96\050\uff96\051\uff96" +
    "\052\uff96\053\uff96\054\uff96\055\uff96\056\uff96\057\uff96\061" +
    "\uff96\062\uff96\065\uff96\067\uff96\071\uff96\001\002\000\016" +
    "\004\074\006\100\007\071\027\075\047\070\064\076\001" +
    "\002\000\062\010\uff97\013\uff97\014\uff97\015\uff97\026\uff97" +
    "\030\uff97\031\uff97\037\uff97\040\uff97\046\uff97\047\uff97\050" +
    "\uff97\051\uff97\052\uff97\053\uff97\054\uff97\055\uff97\056\uff97" +
    "\057\uff97\061\uff97\062\uff97\065\uff97\067\uff97\071\uff97\001" +
    "\002\000\006\062\152\065\153\001\002\000\016\004\074" +
    "\006\100\007\071\027\075\047\070\064\076\001\002\000" +
    "\062\010\uff98\013\uff98\014\uff98\015\uff98\026\uff98\030\uff98" +
    "\031\uff98\037\uff98\040\uff98\046\uff98\047\uff98\050\uff98\051" +
    "\uff98\052\uff98\053\uff98\054\uff98\055\uff98\056\uff98\057\uff98" +
    "\061\uff98\062\uff98\065\uff98\067\uff98\071\uff98\001\002\000" +
    "\042\010\103\014\111\026\105\031\117\046\110\047\102" +
    "\050\114\051\104\052\115\053\120\054\112\055\116\056" +
    "\107\057\106\062\uff9a\065\uff9a\001\002\000\042\010\103" +
    "\014\111\026\105\031\117\046\110\047\102\050\114\051" +
    "\104\052\115\053\120\054\112\055\116\056\107\057\106" +
    "\062\uff99\065\uff99\001\002\000\006\062\203\071\uff8f\001" +
    "\002\000\062\010\uff8d\013\uff8d\014\uff8d\015\uff8d\026\uff8d" +
    "\030\uff8d\031\uff8d\037\uff8d\040\uff8d\046\uff8d\047\uff8d\050" +
    "\uff8d\051\uff8d\052\uff8d\053\uff8d\054\uff8d\055\uff8d\056\uff8d" +
    "\057\uff8d\061\uff8d\062\uff8d\065\uff8d\067\uff8d\071\uff8d\001" +
    "\002\000\016\004\074\006\100\007\071\027\075\047\070" +
    "\064\076\001\002\000\044\010\103\014\111\026\105\030" +
    "\201\031\117\046\110\047\102\050\114\051\104\052\115" +
    "\053\120\054\112\055\116\056\107\057\106\062\uff8a\071" +
    "\uff8a\001\002\000\056\010\uff9d\014\uff9d\026\uff9d\030\uff9d" +
    "\031\uff9d\045\165\046\uff9d\047\uff9d\050\uff9d\051\uff9d\052" +
    "\uff9d\053\uff9d\054\uff9d\055\uff9d\056\uff9d\057\uff9d\062\uff9d" +
    "\063\uff9d\064\144\066\uff9d\070\140\071\uff9d\001\002\000" +
    "\004\071\164\001\002\000\062\010\uff8e\013\uff8e\014\uff8e" +
    "\015\uff8e\026\uff8e\030\uff8e\031\uff8e\037\uff8e\040\uff8e\046" +
    "\uff8e\047\uff8e\050\uff8e\051\uff8e\052\uff8e\053\uff8e\054\uff8e" +
    "\055\uff8e\056\uff8e\057\uff8e\061\uff8e\062\uff8e\065\uff8e\067" +
    "\uff8e\071\uff8e\001\002\000\016\004\074\006\100\007\071" +
    "\027\075\047\070\064\076\001\002\000\040\010\103\014" +
    "\111\026\105\031\117\046\110\047\102\050\114\051\104" +
    "\052\115\053\120\054\112\055\116\056\107\057\106\061" +
    "\167\001\002\000\004\004\176\001\002\000\006\061\172" +
    "\071\171\001\002\000\062\010\uff93\013\uff93\014\uff93\015" +
    "\uff93\026\uff93\030\uff93\031\uff93\037\uff93\040\uff93\046\uff93" +
    "\047\uff93\050\uff93\051\uff93\052\uff93\053\uff93\054\uff93\055" +
    "\uff93\056\uff93\057\uff93\061\uff93\062\uff93\065\uff93\067\uff93" +
    "\071\uff93\001\002\000\004\004\173\001\002\000\004\045" +
    "\174\001\002\000\016\004\074\006\100\007\071\027\075" +
    "\047\070\064\076\001\002\000\042\010\103\014\111\026" +
    "\105\031\117\046\110\047\102\050\114\051\104\052\115" +
    "\053\120\054\112\055\116\056\107\057\106\061\uff95\071" +
    "\uff95\001\002\000\004\045\177\001\002\000\016\004\074" +
    "\006\100\007\071\027\075\047\070\064\076\001\002\000" +
    "\042\010\103\014\111\026\105\031\117\046\110\047\102" +
    "\050\114\051\104\052\115\053\120\054\112\055\116\056" +
    "\107\057\106\061\uff94\071\uff94\001\002\000\016\004\uff8c" +
    "\006\uff8c\007\uff8c\027\uff8c\047\uff8c\064\uff8c\001\002\000" +
    "\042\010\103\014\111\026\105\031\117\046\110\047\102" +
    "\050\114\051\104\052\115\053\120\054\112\055\116\056" +
    "\107\057\106\062\uff8b\071\uff8b\001\002\000\016\004\074" +
    "\006\100\007\071\027\075\047\070\064\076\001\002\000" +
    "\006\062\205\071\uff90\001\002\000\016\004\074\006\100" +
    "\007\071\027\075\047\070\064\076\001\002\000\006\062" +
    "\uff92\071\uff92\001\002\000\006\062\uff91\071\uff91\001\002" +
    "\000\032\004\uffca\016\uffca\017\uffca\020\uffca\021\uffca\022" +
    "\uffca\023\uffca\025\uffca\034\uffca\036\uffca\043\uffca\044\uffca" +
    "\001\002\000\062\010\uffb0\013\uffb0\014\111\015\uffb0\026" +
    "\105\030\uffb0\031\uffb0\037\uffb0\040\uffb0\046\uffb0\047\uffb0" +
    "\050\114\051\104\052\uffb0\053\uffb0\054\uffb0\055\uffb0\056" +
    "\uffb0\057\uffb0\061\uffb0\062\uffb0\065\uffb0\067\uffb0\071\uffb0" +
    "\001\002\000\040\010\103\014\111\026\105\031\117\046" +
    "\110\047\102\050\114\051\104\052\115\053\120\054\112" +
    "\055\116\056\107\057\106\067\213\001\002\000\070\010" +
    "\uff9c\013\uff9c\014\uff9c\015\uff9c\026\uff9c\030\uff9c\031\uff9c" +
    "\037\uff9c\040\uff9c\045\uff9c\046\uff9c\047\uff9c\050\uff9c\051" +
    "\uff9c\052\uff9c\053\uff9c\054\uff9c\055\uff9c\056\uff9c\057\uff9c" +
    "\061\uff9c\062\uff9c\063\uff9c\065\uff9c\066\uff9c\067\uff9c\071" +
    "\uff9c\001\002\000\032\004\uffbb\016\uffbb\017\uffbb\020\uffbb" +
    "\021\uffbb\022\uffbb\023\uffbb\025\uffbb\034\uffbb\036\uffbb\043" +
    "\uffbb\044\uffbb\001\002\000\040\010\103\014\111\026\105" +
    "\031\117\046\110\047\102\050\114\051\104\052\115\053" +
    "\120\054\112\055\116\056\107\057\106\061\uffd1\001\002" +
    "\000\004\061\217\001\002\000\032\004\uffbc\016\uffbc\017" +
    "\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc\025\uffbc\034\uffbc" +
    "\036\uffbc\043\uffbc\044\uffbc\001\002\000\004\061\235\001" +
    "\002\000\022\004\074\005\222\006\100\007\071\027\075" +
    "\047\070\064\076\065\224\001\002\000\006\062\uffb5\065" +
    "\uffb5\001\002\000\042\010\103\014\111\026\105\031\117" +
    "\046\110\047\102\050\114\051\104\052\115\053\120\054" +
    "\112\055\116\056\107\057\106\062\uffb4\065\uffb4\001\002" +
    "\000\004\061\uffb6\001\002\000\006\062\226\065\230\001" +
    "\002\000\020\004\074\005\222\006\100\007\071\027\075" +
    "\047\070\064\076\001\002\000\006\062\231\065\232\001" +
    "\002\000\004\061\uffb7\001\002\000\020\004\074\005\222" +
    "\006\100\007\071\027\075\047\070\064\076\001\002\000" +
    "\004\061\uffb8\001\002\000\006\062\uffba\065\uffba\001\002" +
    "\000\006\062\uffb9\065\uffb9\001\002\000\032\004\uffc6\016" +
    "\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6\025\uffc6" +
    "\034\uffc6\036\uffc6\043\uffc6\044\uffc6\001\002\000\004\061" +
    "\237\001\002\000\032\004\uffc9\016\uffc9\017\uffc9\020\uffc9" +
    "\021\uffc9\022\uffc9\023\uffc9\025\uffc9\034\uffc9\036\uffc9\043" +
    "\uffc9\044\uffc9\001\002\000\040\010\103\014\111\026\105" +
    "\031\117\037\241\046\110\047\102\050\114\051\104\052" +
    "\115\053\120\054\112\055\116\056\107\057\106\001\002" +
    "\000\024\004\057\021\052\022\053\023\056\025\055\034" +
    "\050\036\062\043\051\044\060\001\002\000\032\004\057" +
    "\016\245\017\247\020\250\021\052\022\053\023\056\025" +
    "\055\034\050\036\062\043\051\044\060\001\002\000\004" +
    "\020\267\001\002\000\010\016\245\017\257\020\260\001" +
    "\002\000\024\004\057\021\052\022\053\023\056\025\055" +
    "\034\050\036\062\043\051\044\060\001\002\000\032\004" +
    "\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc" +
    "\025\uffcc\034\uffcc\036\uffcc\043\uffcc\044\uffcc\001\002\000" +
    "\016\004\074\006\100\007\071\027\075\047\070\064\076" +
    "\001\002\000\004\061\251\001\002\000\032\004\uffc2\016" +
    "\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\025\uffc2" +
    "\034\uffc2\036\uffc2\043\uffc2\044\uffc2\001\002\000\040\010" +
    "\103\014\111\026\105\031\117\037\253\046\110\047\102" +
    "\050\114\051\104\052\115\053\120\054\112\055\116\056" +
    "\107\057\106\001\002\000\024\004\057\021\052\022\053" +
    "\023\056\025\055\034\050\036\062\043\051\044\060\001" +
    "\002\000\032\004\057\016\uffcd\017\uffcd\020\uffcd\021\052" +
    "\022\053\023\056\025\055\034\050\036\062\043\051\044" +
    "\060\001\002\000\026\004\057\020\uffcf\021\052\022\053" +
    "\023\056\025\055\034\050\036\062\043\051\044\060\001" +
    "\002\000\004\020\265\001\002\000\016\004\074\006\100" +
    "\007\071\027\075\047\070\064\076\001\002\000\004\061" +
    "\261\001\002\000\032\004\uffc4\016\uffc4\017\uffc4\020\uffc4" +
    "\021\uffc4\022\uffc4\023\uffc4\025\uffc4\034\uffc4\036\uffc4\043" +
    "\uffc4\044\uffc4\001\002\000\040\010\103\014\111\026\105" +
    "\031\117\037\263\046\110\047\102\050\114\051\104\052" +
    "\115\053\120\054\112\055\116\056\107\057\106\001\002" +
    "\000\024\004\057\021\052\022\053\023\056\025\055\034" +
    "\050\036\062\043\051\044\060\001\002\000\032\004\057" +
    "\016\uffce\017\uffce\020\uffce\021\052\022\053\023\056\025" +
    "\055\034\050\036\062\043\051\044\060\001\002\000\004" +
    "\061\266\001\002\000\032\004\uffc5\016\uffc5\017\uffc5\020" +
    "\uffc5\021\uffc5\022\uffc5\023\uffc5\025\uffc5\034\uffc5\036\uffc5" +
    "\043\uffc5\044\uffc5\001\002\000\004\061\270\001\002\000" +
    "\032\004\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3" +
    "\023\uffc3\025\uffc3\034\uffc3\036\uffc3\043\uffc3\044\uffc3\001" +
    "\002\000\004\020\272\001\002\000\004\061\273\001\002" +
    "\000\032\004\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0\022" +
    "\uffc0\023\uffc0\025\uffc0\034\uffc0\036\uffc0\043\uffc0\044\uffc0" +
    "\001\002\000\004\061\ufffc\001\002\000\004\045\276\001" +
    "\002\000\016\004\074\006\100\007\071\027\075\047\070" +
    "\064\076\001\002\000\040\010\103\014\111\026\105\031" +
    "\117\040\300\046\110\047\102\050\114\051\104\052\115" +
    "\053\120\054\112\055\116\056\107\057\106\001\002\000" +
    "\016\004\074\006\100\007\071\027\075\047\070\064\076" +
    "\001\002\000\042\010\103\013\302\014\111\015\304\026" +
    "\105\031\117\046\110\047\102\050\114\051\104\052\115" +
    "\053\120\054\112\055\116\056\107\057\106\001\002\000" +
    "\016\004\074\006\100\007\071\027\075\047\070\064\076" +
    "\001\002\000\004\015\310\001\002\000\024\004\057\021" +
    "\052\022\053\023\056\025\055\034\050\036\062\043\051" +
    "\044\060\001\002\000\026\004\057\020\306\021\052\022" +
    "\053\023\056\025\055\034\050\036\062\043\051\044\060" +
    "\001\002\000\004\061\307\001\002\000\032\004\uffbe\016" +
    "\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\025\uffbe" +
    "\034\uffbe\036\uffbe\043\uffbe\044\uffbe\001\002\000\024\004" +
    "\057\021\052\022\053\023\056\025\055\034\050\036\062" +
    "\043\051\044\060\001\002\000\026\004\057\020\312\021" +
    "\052\022\053\023\056\025\055\034\050\036\062\043\051" +
    "\044\060\001\002\000\004\061\313\001\002\000\032\004" +
    "\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf" +
    "\025\uffbf\034\uffbf\036\uffbf\043\uffbf\044\uffbf\001\002\000" +
    "\040\010\103\014\111\015\uffd0\026\105\031\117\046\110" +
    "\047\102\050\114\051\104\052\115\053\120\054\112\055" +
    "\116\056\107\057\106\001\002\000\032\004\uffbd\016\uffbd" +
    "\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\025\uffbd\034" +
    "\uffbd\036\uffbd\043\uffbd\044\uffbd\001\002\000\040\010\103" +
    "\014\111\015\317\026\105\031\117\046\110\047\102\050" +
    "\114\051\104\052\115\053\120\054\112\055\116\056\107" +
    "\057\106\001\002\000\024\004\057\021\052\022\053\023" +
    "\056\025\055\034\050\036\062\043\051\044\060\001\002" +
    "\000\026\004\057\020\321\021\052\022\053\023\056\025" +
    "\055\034\050\036\062\043\051\044\060\001\002\000\004" +
    "\061\322\001\002\000\032\004\uffc1\016\uffc1\017\uffc1\020" +
    "\uffc1\021\uffc1\022\uffc1\023\uffc1\025\uffc1\034\uffc1\036\uffc1" +
    "\043\uffc1\044\uffc1\001\002\000\004\004\324\001\002\000" +
    "\012\062\uff9d\063\uff9d\065\uff9d\066\uff9d\001\002\000\012" +
    "\062\326\063\066\065\330\066\064\001\002\000\004\004" +
    "\324\001\002\000\006\062\332\065\333\001\002\000\004" +
    "\061\331\001\002\000\032\004\uffc7\016\uffc7\017\uffc7\020" +
    "\uffc7\021\uffc7\022\uffc7\023\uffc7\025\uffc7\034\uffc7\036\uffc7" +
    "\043\uffc7\044\uffc7\001\002\000\004\004\324\001\002\000" +
    "\004\061\334\001\002\000\032\004\uffc8\016\uffc8\017\uffc8" +
    "\020\uffc8\021\uffc8\022\uffc8\023\uffc8\025\uffc8\034\uffc8\036" +
    "\uffc8\043\uffc8\044\uffc8\001\002\000\012\062\uffd3\063\066" +
    "\065\uffd3\066\064\001\002\000\012\062\uffd2\063\066\065" +
    "\uffd2\066\064\001\002\000\024\004\057\021\052\022\053" +
    "\023\056\025\055\034\050\036\062\043\051\044\060\001" +
    "\002\000\012\012\ufffe\032\ufffe\041\ufffe\042\ufffe\001\002" +
    "\000\026\004\057\020\342\021\052\022\053\023\056\025" +
    "\055\034\050\036\062\043\051\044\060\001\002\000\004" +
    "\061\ufffd\001\002\000\004\064\354\001\002\000\014\010" +
    "\347\012\uffe7\032\uffe7\041\uffe7\042\uffe7\001\002\000\012" +
    "\012\ufff9\032\ufff9\041\ufff9\042\ufff9\001\002\000\014\010" +
    "\351\012\uffe8\032\uffe8\041\uffe8\042\uffe8\001\002\000\004" +
    "\004\343\001\002\000\014\010\uffe9\012\uffe9\032\uffe9\041" +
    "\uffe9\042\uffe9\001\002\000\004\004\343\001\002\000\014" +
    "\010\uffea\012\uffea\032\uffea\041\uffea\042\uffea\001\002\000" +
    "\006\024\u0102\060\u0101\001\002\000\006\004\355\065\356" +
    "\001\002\000\006\060\371\062\367\001\002\000\006\024" +
    "\uffd8\060\uffd8\001\002\000\006\061\362\065\361\001\002" +
    "\000\006\061\365\065\364\001\002\000\006\024\uffd9\060" +
    "\uffd9\001\002\000\004\004\355\001\002\000\006\061\uffdb" +
    "\065\uffdb\001\002\000\006\024\uffda\060\uffda\001\002\000" +
    "\004\004\355\001\002\000\006\061\uffdc\065\uffdc\001\002" +
    "\000\004\004\377\001\002\000\006\060\374\062\373\001" +
    "\002\000\004\004\033\001\002\000\006\061\uffd6\065\uffd6" +
    "\001\002\000\004\004\376\001\002\000\004\004\033\001" +
    "\002\000\006\061\uffd7\065\uffd7\001\002\000\010\045\uffd5" +
    "\060\uffd5\062\uffd5\001\002\000\010\045\uffd4\060\uffd4\062" +
    "\uffd4\001\002\000\004\024\u0106\001\002\000\004\004\033" +
    "\001\002\000\012\012\013\032\011\041\014\042\007\001" +
    "\002\000\004\061\u0104\001\002\000\014\010\uffe4\012\uffe4" +
    "\032\uffe4\041\uffe4\042\uffe4\001\002\000\004\024\uffe6\001" +
    "\002\000\012\012\013\032\011\041\014\042\007\001\002" +
    "\000\004\061\u0108\001\002\000\014\010\uffe5\012\uffe5\032" +
    "\uffe5\041\uffe5\042\uffe5\001\002\000\004\002\000\001\002" +
    "\000\010\045\u0112\060\u0111\062\367\001\002\000\012\012" +
    "\ufffb\032\ufffb\041\ufffb\042\ufffb\001\002\000\014\004\u010a" +
    "\012\ufff5\032\ufff5\041\ufff5\042\ufff5\001\002\000\014\004" +
    "\ufff7\012\ufff7\032\ufff7\041\ufff7\042\ufff7\001\002\000\014" +
    "\004\u010a\012\ufff6\032\ufff6\041\ufff6\042\ufff6\001\002\000" +
    "\014\004\ufff8\012\ufff8\032\ufff8\041\ufff8\042\ufff8\001\002" +
    "\000\010\045\u011a\060\u0111\062\373\001\002\000\004\004" +
    "\033\001\002\000\016\004\074\006\100\007\071\027\075" +
    "\047\070\064\076\001\002\000\004\045\u0114\001\002\000" +
    "\016\004\074\006\100\007\071\027\075\047\070\064\076" +
    "\001\002\000\040\010\103\014\111\026\105\031\117\046" +
    "\110\047\102\050\114\051\104\052\115\053\120\054\112" +
    "\055\116\056\107\057\106\061\u0116\001\002\000\014\004" +
    "\ufff2\012\ufff2\032\ufff2\041\ufff2\042\ufff2\001\002\000\040" +
    "\010\103\014\111\026\105\031\117\046\110\047\102\050" +
    "\114\051\104\052\115\053\120\054\112\055\116\056\107" +
    "\057\106\061\u0118\001\002\000\014\004\ufff0\012\ufff0\032" +
    "\ufff0\041\ufff0\042\ufff0\001\002\000\004\045\ufff4\001\002" +
    "\000\016\004\074\006\100\007\071\027\075\047\070\064" +
    "\076\001\002\000\004\045\u011c\001\002\000\016\004\074" +
    "\006\100\007\071\027\075\047\070\064\076\001\002\000" +
    "\040\010\103\014\111\026\105\031\117\046\110\047\102" +
    "\050\114\051\104\052\115\053\120\054\112\055\116\056" +
    "\107\057\106\061\u011e\001\002\000\014\004\ufff3\012\ufff3" +
    "\032\ufff3\041\ufff3\042\ufff3\001\002\000\040\010\103\014" +
    "\111\026\105\031\117\046\110\047\102\050\114\051\104" +
    "\052\115\053\120\054\112\055\116\056\107\057\106\061" +
    "\u0120\001\002\000\014\004\ufff1\012\ufff1\032\ufff1\041\ufff1" +
    "\042\ufff1\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u011f\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\011\004\007\005\014\001\001" +
    "\000\006\007\u010a\011\u010b\001\001\000\002\001\001\000" +
    "\006\016\344\020\343\001\001\000\004\005\337\001\001" +
    "\000\010\036\053\037\060\044\062\001\001\000\006\013" +
    "\017\014\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\021\001\001\000\002\001\001\000\004\014" +
    "\024\001\001\000\002\001\001\000\004\014\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\027\001" +
    "\001\000\004\024\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\022\037\024\040\001\001\000\004\024\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\043\315\044\076" +
    "\056\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\037\245\044\062\001\001\000\006\037\270\044\062" +
    "\001\001\000\010\043\237\044\076\056\071\001\001\000" +
    "\004\046\235\001\001\000\004\041\217\001\001\000\002" +
    "\001\001\000\012\032\215\043\214\044\076\056\071\001" +
    "\001\000\002\001\001\000\010\043\211\044\076\056\071" +
    "\001\001\000\010\043\072\044\076\056\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\043\210\044\076" +
    "\056\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\046\141\050\142\054\140\001\001" +
    "\000\010\043\136\044\076\056\071\001\001\000\010\043" +
    "\100\044\076\056\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\043\135\044\076\056" +
    "\071\001\001\000\010\043\134\044\076\056\071\001\001" +
    "\000\010\043\133\044\076\056\071\001\001\000\010\043" +
    "\132\044\076\056\071\001\001\000\010\043\131\044\076" +
    "\056\071\001\001\000\010\043\130\044\076\056\071\001" +
    "\001\000\010\043\127\044\076\056\071\001\001\000\010" +
    "\043\126\044\076\056\071\001\001\000\010\043\125\044" +
    "\076\056\071\001\001\000\002\001\001\000\010\043\124" +
    "\044\076\056\071\001\001\000\010\043\123\044\076\056" +
    "\071\001\001\000\010\043\122\044\076\056\071\001\001" +
    "\000\010\043\121\044\076\056\071\001\001\000\010\043" +
    "\120\044\076\056\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\043\160\044\076\052\162\053\157\055" +
    "\155\056\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\043\144\044\076\056\071\001" +
    "\001\000\004\045\150\001\001\000\002\001\001\000\010" +
    "\043\154\044\076\056\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\043\153\044\076\056\071\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\051\203\001\001\000\002\001\001\000\010\043\201" +
    "\044\076\056\071\001\001\000\002\001\001\000\010\046" +
    "\141\050\142\054\140\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\043\165\044\076\056\071\001\001\000" +
    "\004\047\167\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\043\174\044\076\056\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\043\177\044\076\056\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\043\160\044\076\053\157\055\206\056\071\001" +
    "\001\000\002\001\001\000\014\043\160\044\076\053\157" +
    "\055\205\056\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\042\224\043\222\044\076\056\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\040\226" +
    "\001\001\000\012\042\233\043\222\044\076\056\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\042\232" +
    "\043\222\044\076\056\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\036" +
    "\241\037\060\044\062\001\001\000\012\034\242\035\243" +
    "\037\245\044\062\001\001\000\002\001\001\000\004\034" +
    "\255\001\001\000\010\036\254\037\060\044\062\001\001" +
    "\000\002\001\001\000\010\043\251\044\076\056\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\036\253\037\060\044\062\001\001\000\006\037" +
    "\245\044\062\001\001\000\006\037\245\044\062\001\001" +
    "\000\002\001\001\000\010\043\261\044\076\056\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\036\263\037\060\044\062\001\001\000\006\037" +
    "\245\044\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\043\276\044\076\056\071\001\001\000" +
    "\002\001\001\000\010\043\300\044\076\056\071\001\001" +
    "\000\004\033\302\001\001\000\010\043\313\044\076\056" +
    "\071\001\001\000\002\001\001\000\010\036\304\037\060" +
    "\044\062\001\001\000\006\037\245\044\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\036\310\037\060" +
    "\044\062\001\001\000\006\037\245\044\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\036\317\037\060\044" +
    "\062\001\001\000\006\037\245\044\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\044\324\001\001\000" +
    "\002\001\001\000\004\031\326\001\001\000\004\044\335" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\044\334\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\036" +
    "\340\037\060\044\062\001\001\000\002\001\001\000\006" +
    "\037\245\044\062\001\001\000\002\001\001\000\004\026" +
    "\352\001\001\000\004\015\345\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\347\001\001\000\002\001" +
    "\001\000\004\020\351\001\001\000\002\001\001\000\004" +
    "\017\377\001\001\000\004\027\356\001\001\000\004\030" +
    "\367\001\001\000\002\001\001\000\004\025\357\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\027\362\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\027\365" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\371\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\374\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\u0104\001\001\000\010\003\011\004\u0102\005\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\003\011\004\u0106\005\014\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\010\u0112" +
    "\030\u010f\001\001\000\002\001\001\000\006\006\u010d\011" +
    "\u010c\001\001\000\002\001\001\000\004\011\u010e\001\001" +
    "\000\002\001\001\000\004\010\u011a\001\001\000\004\021" +
    "\u0118\001\001\000\010\043\u0116\044\076\056\071\001\001" +
    "\000\002\001\001\000\010\043\u0114\044\076\056\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\043\u011e\044" +
    "\076\056\071\001\001\000\002\001\001\000\010\043\u011c" +
    "\044\076\056\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PcatParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PcatParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PcatParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    static int[] tokens = {
      sym.error, sym.ID, sym.STRING_LITERAL, sym.INTEGER_LITERAL, sym.REAL_LITERAL,
      sym.AND, sym.ARRAY, sym.BEGIN, sym.BY, sym.DIV, sym.DO, sym.ELSE, sym.ELSIF, sym.END,
      sym.EXIT, sym.FOR, sym.IF, sym.IS, sym.LOOP, sym.MOD, sym.NOT, sym.OF, sym.OR,
      sym.PROCEDURE, sym.PROGRAM, sym.READ, sym.RECORD, sym.RETURN, sym.THEN, sym.TO,
      sym.TYPE, sym.VAR, sym.WHILE, sym.WRITE, sym.ASGN, sym.PLUS, sym.MINUS, sym.TIMES, sym.SLASH,
      sym.LT, sym.LEQ, sym.GT, sym.GEQ, sym.EQ, sym.NEQ, sym.COLON, sym.SEMI, sym.COMMA, sym.DOT,
      sym.LPAREN, sym.RPAREN, sym.LSQBRA, sym.RSQBRA, sym.LCUBRA, sym.RCUBRA
    };

    static String[] token_names = {
      "error", "ID", "STRING_LITERAL", "INTEGER_LITERAL", "REAL_LITERAL",
      "AND", "ARRAY", "BEGIN", "BY", "DIV", "DO", "ELSE", "ELSIF", "END",
      "EXIT", "FOR", "IF", "IS", "LOOP", "MOD", "NOT", "OF", "OR",
      "PROCEDURE", "PROGRAM", "READ", "RECORD", "RETURN", "THEN", "TO",
      "TYPE", "VAR", "WHILE", "WRITE", "ASGN :=", "PLUS +", "MINUS -", "TIMES *", "SLASH /",
      "LT <", "LEQ <=", "GT >", "GEQ >=", "EQ =", "NEQ <>", "COLON :", "SEMI ;", "COMMA ,", "DOT .",
      "LPAREN (", "RPAREN )", "LSQBRA [", "RSQBRA ]", "LCUBRA "+'{', "RCUBRA "+'}'
    };

    public static String print ( Symbol s ) {
        for ( int i = 0; i < tokens.length; i++ ) {
            if (tokens[i] == s.sym) {
                String res = token_names[i] + " ";
                if (s.value == null)
                    return res;
                else if (s.value instanceof Integer)
                    return res + ((Integer) s.value).intValue();
                else if (s.value instanceof Float)
                    return res + ((Float) s.value).floatValue();
                else if (s.value instanceof String)
                    return res + "\"" + (String) s.value + "\"";
            }
        };
        return "?";
    }

    public void syntax_error ( Symbol token ) {
        System.err.println("*** Syntax Error: " + print(token) + " (line: " + token.left
                           + ", column: " + token.right + ")");
        System.exit(1);
    }

    /** nil is the empty list */
    final static List nil = Nil$.MODULE$;

    /** Append list2 at the end of list1 (ie, return a new list containing
        the elements from list1 followed by the elements from list2) */
    static<T> List<T> append ( List<T> list1, List<T> list2 ) {
        return list1.$colon$colon$colon(list2);
    }

    /** append the element elem at the end of the list
       (ie, return a new list containing the list followed by the elem) */
    static<T> List<T> append ( List<T> list, T elem ) {
        return nil.$colon$colon(elem).$colon$colon$colon(list);
    }

    /** Insert the element elem at the beginning of the list
        (ie, return a new list containing the elem followed by the list) */
    static<T> List<T> add ( T elem, List<T> list ) {
        return list.$colon$colon(elem);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$PcatParser$actions {
  private final PcatParser parser;

  /** Constructor */
  CUP$PcatParser$actions(PcatParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$PcatParser$do_action_part00000000(
    int                        CUP$PcatParser$act_num,
    java_cup.runtime.lr_parser CUP$PcatParser$parser,
    java.util.Stack            CUP$PcatParser$stack,
    int                        CUP$PcatParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PcatParser$result;

      /* select the action based on the action number */
      switch (CUP$PcatParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		RESULT = start_val;
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$PcatParser$parser.done_parsing();
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= PROGRAM IS body SEMI 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		Body b = (Body)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		 PCAT.setAST(new ProcDecl("main","NoType",nil,b)); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // body_lst ::= declaration 
            {
              List<Declaration> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Declaration d = (Declaration)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = add(d,nil); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("body_lst",1, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // body_lst ::= body_lst declaration 
            {
              List<Declaration> RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		List<Declaration> bl = (List<Declaration>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Declaration d = (Declaration)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = append(bl,d); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("body_lst",1, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // body ::= body_lst BEGIN statement_lst END 
            {
              Body RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).right;
		List<Declaration> bl = (List<Declaration>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		List<Stmt> sl = (List<Stmt>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		 RESULT = new Body(bl,sl); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("body",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // body ::= BEGIN statement_lst END 
            {
              Body RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		List<Stmt> sl = (List<Stmt>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		 RESULT = new Body(nil,sl); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("body",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration ::= VAR var_decls 
            {
              Declaration RESULT =null;
		int vdecsleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int vdecsright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		List<VarDecl> vdecs = (List<VarDecl>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = new VarDecls(vdecs); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("declaration",3, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaration ::= TYPE type_decls 
            {
              Declaration RESULT =null;
		int tdecsleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int tdecsright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		List<TypeDecl> tdecs = (List<TypeDecl>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = new TypeDecls(tdecs); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("declaration",3, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaration ::= PROCEDURE procedure_decls 
            {
              Declaration RESULT =null;
		int pdecsleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int pdecsright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		List<ProcDecl> pdecs = (List<ProcDecl>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = new ProcDecls(pdecs); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("declaration",3, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // var_decl_lst ::= var_decl_lst var_decl 
            {
              List<VarDecl> RESULT =null;
		int vdeclleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int vdeclright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		List<VarDecl> vdecl = (List<VarDecl>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		int vdecleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int vdecright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		VarDecl vdec = (VarDecl)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = append(vdecl,vdec); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("var_decl_lst",4, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // var_decl_lst ::= var_decl 
            {
              List<VarDecl> RESULT =null;
		int vdecleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int vdecright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		VarDecl vdec = (VarDecl)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = add(vdec,nil); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("var_decl_lst",4, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // var_decls ::= var_decl var_decl_lst 
            {
              List<VarDecl> RESULT =null;
		int vdecleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int vdecright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		VarDecl vdec = (VarDecl)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		int vdeclleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int vdeclright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		List<VarDecl> vdecl = (List<VarDecl>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = add(vdec,vdecl); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("var_decls",5, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // var_decls ::= var_decl 
            {
              List<VarDecl> RESULT =null;
		int vdecleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int vdecright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		VarDecl vdec = (VarDecl)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = add(vdec,nil); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("var_decls",5, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sq_var_decl ::= COLON typename 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = t; 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("sq_var_decl",6, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // var_decl ::= ID id_lst sq_var_decl ASGN expression SEMI 
            {
              VarDecl RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-5)).value;
		int idlleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)).left;
		int idlright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)).right;
		List<String> idl = (List<String>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)).value;
		int sqvdleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).left;
		int sqvdright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).right;
		String sqvd = (String)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		 RESULT = new VarDecl(add(i,idl),sqvd,e); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("var_decl",7, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-5)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // var_decl ::= ID sq_var_decl ASGN expression SEMI 
            {
              VarDecl RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)).value;
		int sqvdleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).left;
		int sqvdright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).right;
		String sqvd = (String)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		 RESULT = new VarDecl(add(i,nil),sqvd,e); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("var_decl",7, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // var_decl ::= ID id_lst ASGN expression SEMI 
            {
              VarDecl RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)).value;
		int idlleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).left;
		int idlright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).right;
		List<String> idl = (List<String>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		 RESULT = new VarDecl(add(i,idl),"NoType",e); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("var_decl",7, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // var_decl ::= ID ASGN expression SEMI 
            {
              VarDecl RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		 RESULT = new VarDecl(add(i,nil),"NoType",e); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("var_decl",7, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // type_decls_lst ::= type_decls_lst AND type_decl 
            {
              List<TypeDecl> RESULT =null;
		int tdeclleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int tdeclright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		List<TypeDecl> tdecl = (List<TypeDecl>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		int tdecleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int tdecright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		TypeDecl tdec = (TypeDecl)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = append(tdecl,tdec); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("type_decls_lst",8, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // type_decls_lst ::= AND type_decl 
            {
              List<TypeDecl> RESULT =null;
		int tdecleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int tdecright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		TypeDecl tdec = (TypeDecl)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = add(tdec,nil); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("type_decls_lst",8, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type_decls ::= type_decl type_decls_lst 
            {
              List<TypeDecl> RESULT =null;
		int tdecleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int tdecright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		TypeDecl tdec = (TypeDecl)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		int tdeclleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int tdeclright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		List<TypeDecl> tdecl = (List<TypeDecl>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = add(tdec,tdecl); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("type_decls",9, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type_decls ::= type_decl 
            {
              List<TypeDecl> RESULT =null;
		int tdecleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int tdecright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		TypeDecl tdec = (TypeDecl)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = add(tdec,nil); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("type_decls",9, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type_decl ::= ID IS type SEMI 
            {
              TypeDecl RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		 RESULT = new TypeDecl(i,t); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("type_decl",10, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // pdcls_lst ::= pdcls_lst AND procedure_decl 
            {
              List<ProcDecl> RESULT =null;
		int pdeclleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int pdeclright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		List<ProcDecl> pdecl = (List<ProcDecl>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		int pdecleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int pdecright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		ProcDecl pdec = (ProcDecl)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = append(pdecl,pdec); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("pdcls_lst",11, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // pdcls_lst ::= AND procedure_decl 
            {
              List<ProcDecl> RESULT =null;
		int pdecleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int pdecright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		ProcDecl pdec = (ProcDecl)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = add(pdec,nil); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("pdcls_lst",11, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // procedure_decls ::= procedure_decl pdcls_lst 
            {
              List<ProcDecl> RESULT =null;
		int pdecleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int pdecright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		ProcDecl pdec = (ProcDecl)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		int pdeclleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int pdeclright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		List<ProcDecl> pdecl = (List<ProcDecl>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = add(pdec,pdecl); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("procedure_decls",12, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // procedure_decls ::= procedure_decl 
            {
              List<ProcDecl> RESULT =null;
		int pdecleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int pdecright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		ProcDecl pdec = (ProcDecl)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = add(pdec,nil); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("procedure_decls",12, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sq_proc_decl ::= COLON typename 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = t; 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("sq_proc_decl",13, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // procedure_decl ::= ID formal_params sq_proc_decl IS body SEMI 
            {
              ProcDecl RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-5)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)).right;
		List<Tuple2<List<String>,String>> fp = (List<Tuple2<List<String>,String>>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)).value;
		int sqpdlleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).left;
		int sqpdlright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).right;
		String sqpdl = (String)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		Body b = (Body)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		 RESULT = new ProcDecl(i,sqpdl,fp,b); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("procedure_decl",14, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-5)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // procedure_decl ::= ID formal_params IS body SEMI 
            {
              ProcDecl RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).right;
		List<Tuple2<List<String>,String>> fp = (List<Tuple2<List<String>,String>>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		Body b = (Body)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		 RESULT = new ProcDecl(i,"NoType",fp,b); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("procedure_decl",14, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // typename ::= ID 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = i; 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("typename",15, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // component_lst ::= component_lst component 
            {
              List<Tuple2<String,String>> RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		List<Tuple2<String,String>> cl = (List<Tuple2<String,String>>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		List<Tuple2<String,String>> c = (List<Tuple2<String,String>>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = append(cl,c); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("component_lst",16, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // component_lst ::= component 
            {
              List<Tuple2<String,String>> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		List<Tuple2<String,String>> c = (List<Tuple2<String,String>>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = append(c,nil); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("component_lst",16, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // type ::= ARRAY OF typename 
            {
              Type RESULT =null;
		int tnleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int tnright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		String tn = (String)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = new ArrayType(tn); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("type",17, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // type ::= RECORD component component_lst END 
            {
              Type RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		List<Tuple2<String,String>> c = (List<Tuple2<String,String>>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		List<Tuple2<String,String>> cl = (List<Tuple2<String,String>>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		 RESULT = new RecordType(append(cl,c)); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("type",17, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // type ::= RECORD component END 
            {
              Type RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		List<Tuple2<String,String>> c = (List<Tuple2<String,String>>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		 RESULT = new RecordType(append(c,nil)); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("type",17, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // component ::= ID COLON typename SEMI 
            {
              List<Tuple2<String,String>> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).value;
		int tnleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int tnright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		String tn = (String)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		 RESULT = add(i,add(tn,nil)); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("component",18, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // fp_section_lst ::= fp_section_lst SEMI fp_section 
            {
              List<Tuple2<List<String>,String>> RESULT =null;
		int fpslleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int fpslright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		List<Tuple2<List<String>,String>> fpsl = (List<Tuple2<List<String>,String>>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		int fpsleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int fpsright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		List<Tuple2<List<String>,String>> fps = (List<Tuple2<List<String>,String>>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = append(fpsl,fps); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("fp_section_lst",19, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // fp_section_lst ::= SEMI fp_section 
            {
              List<Tuple2<List<String>,String>> RESULT =null;
		int fpsleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int fpsright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		List<Tuple2<List<String>,String>> fps = (List<Tuple2<List<String>,String>>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = add(fps,nil); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("fp_section_lst",19, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // formal_params ::= LPAREN fp_section fp_section_lst RPAREN 
            {
              List<Tuple2<List<String>,String>> RESULT =null;
		int fpsleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int fpsright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		List<Tuple2<List<String>,String>> fps = (List<Tuple2<List<String>,String>>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		int fpslleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int fpslright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		List<Tuple2<List<String>,String>> fpsl = (List<Tuple2<List<String>,String>>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		 RESULT = append(fpsl,fps); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("formal_params",20, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // formal_params ::= LPAREN fp_section RPAREN 
            {
              List<Tuple2<List<String>,String>> RESULT =null;
		int fpsleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int fpsright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		List<Tuple2<List<String>,String>> fps = (List<Tuple2<List<String>,String>>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		 RESULT = add(fps,nil); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("formal_params",20, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // formal_params ::= LPAREN RPAREN 
            {
              List<Tuple2<List<String>,String>> RESULT =null;
		 RESULT = nil; 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("formal_params",20, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // fp_section ::= ID id_lst COLON typename 
            {
              List<Tuple2<List<String>,String>> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).value;
		int idlleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int idlright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		List<String> idl = (List<String>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = append(append(idl,add(i,nil)),t); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("fp_section",21, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // fp_section ::= ID COLON typename 
            {
              List<Tuple2<List<String>,String>> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = append(add(i,nil),t); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("fp_section",21, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // id_lst ::= id_lst COMMA ID 
            {
              List<String> RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		List<String> il = (List<String>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = append(il,i); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("id_lst",22, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // id_lst ::= COMMA ID 
            {
              List<String> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = add(i,nil); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("id_lst",22, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // read_lst ::= read_lst COMMA lvalue 
            {
              List<Lvalue> RESULT =null;
		int rlleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int rlright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		List<Lvalue> rl = (List<Lvalue>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		int lvalleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int lvalright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Lvalue lval = (Lvalue)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = append(rl,lval); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("read_lst",23, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // read_lst ::= COMMA lvalue 
            {
              List<Lvalue> RESULT =null;
		int lvalleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int lvalright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Lvalue lval = (Lvalue)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = add(lval,nil); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("read_lst",23, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // sq_return ::= expression 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = e; 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("sq_return",24, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // sq_for ::= BY expression 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = e; 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("sq_for",25, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // sq_else ::= ELSE statement_lst 
            {
              List<Stmt> RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		List<Stmt> sl = (List<Stmt>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = sl; 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("sq_else",26, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // elsif_lst ::= elsif_lst ELSIF expression THEN statement_lst 
            {
              List<Stmt> RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)).right;
		List<Stmt> el = (List<Stmt>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		List<Stmt> sl = (List<Stmt>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("elsif_lst",27, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // elsif_lst ::= ELSIF expression THEN statement_lst 
            {
              List<Stmt> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		List<Stmt> sl = (List<Stmt>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = add(e,add(sl,nil)); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("elsif_lst",27, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // statement_lst ::= statement_lst statement 
            {
              List<Stmt> RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		List<Stmt> sl = (List<Stmt>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = append(sl,s); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement_lst",28, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // statement_lst ::= statement 
            {
              List<Stmt> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = add(s,nil); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement_lst",28, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // statement ::= lvalue ASGN expression SEMI 
            {
              Stmt RESULT =null;
		int lvalleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).left;
		int lvalright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).right;
		Lvalue lval = (Lvalue)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		 RESULT = new AssignSt(lval,e); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",29, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // statement ::= ID actual_params SEMI 
            {
              Stmt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		int apleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int apright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		List<Expr> ap = (List<Expr>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		 RESULT = new CallSt(i,ap); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",29, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // statement ::= READ LPAREN lvalue read_lst RPAREN SEMI 
            {
              Stmt RESULT =null;
		int lvalleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).left;
		int lvalright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).right;
		Lvalue lval = (Lvalue)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).value;
		int rlleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int rlright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		List<Lvalue> rl = (List<Lvalue>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		 RESULT = new ReadSt(add(lval,rl)); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",29, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-5)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // statement ::= READ LPAREN lvalue RPAREN SEMI 
            {
              Stmt RESULT =null;
		int lvalleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int lvalright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		Lvalue lval = (Lvalue)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		 RESULT = new ReadSt(add(lval,nil)); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",29, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // statement ::= WRITE write_params SEMI 
            {
              Stmt RESULT =null;
		int wpleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int wpright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		List<Expr> wp = (List<Expr>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		 RESULT = new WriteSt(wp); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",29, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // statement ::= IF expression THEN statement_lst elsif_lst sq_else END SEMI 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-6)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-6)).value;
		int bsleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)).right;
		List<Stmt> bs = (List<Stmt>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)).value;
		int eisleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).left;
		int eisright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).right;
		List<Stmt> eis = (List<Stmt>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		List<Stmt> es = (List<Stmt>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		 RESULT = new IfSt(e,new SeqSt(bs),new IfSt(e,new SeqSt(eis),new SeqSt(es))); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",29, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-7)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // statement ::= IF expression THEN statement_lst elsif_lst END SEMI 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-5)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-5)).value;
		int bsleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).right;
		List<Stmt> bs = (List<Stmt>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).value;
		int eisleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int eisright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		List<Stmt> eis = (List<Stmt>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		 RESULT = new IfSt(e,new SeqSt(bs),new IfSt(e,new SeqSt(eis),new SeqSt(nil))); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",29, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-6)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // statement ::= IF expression THEN statement_lst sq_else END SEMI 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-5)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-5)).value;
		int bsleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).right;
		List<Stmt> bs = (List<Stmt>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		List<Stmt> es = (List<Stmt>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		 RESULT = new IfSt(e,new SeqSt(bs),new SeqSt(es)); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",29, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-6)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // statement ::= IF expression THEN statement_lst END SEMI 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)).value;
		int bsleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		List<Stmt> bs = (List<Stmt>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		 RESULT = new IfSt(e,new SeqSt(bs),new SeqSt(nil)); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",29, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-5)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // statement ::= WHILE expression DO statement_lst END SEMI 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)).value;
		int bsleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		List<Stmt> bs = (List<Stmt>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		 RESULT = new WhileSt(e,new SeqSt(bs)); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",29, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-5)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // statement ::= LOOP statement END SEMI 
            {
              Stmt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		 RESULT = new LoopSt(s); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",29, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // statement ::= FOR ID ASGN expression TO expression sq_for DO statement_lst END SEMI 
            {
              Stmt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-9)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-9)).value;
		int ieleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-7)).left;
		int ieright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-7)).right;
		Expr ie = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-7)).value;
		int seleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-5)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-5)).right;
		Expr se = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-5)).value;
		int ineleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)).left;
		int ineright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)).right;
		Expr ine = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)).value;
		int bsleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		List<Stmt> bs = (List<Stmt>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		 RESULT = new ForSt(i,ie,se,ine,new SeqSt(bs)); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",29, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-10)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // statement ::= FOR ID ASGN expression TO expression DO statement_lst END SEMI 
            {
              Stmt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-8)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-8)).value;
		int ieleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-6)).left;
		int ieright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-6)).right;
		Expr ie = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-6)).value;
		int seleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)).right;
		Expr se = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)).value;
		int bsleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		List<Stmt> bs = (List<Stmt>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		 RESULT = new ForSt(i,ie,se,new IntConst(1),new SeqSt(bs)); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",29, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-9)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // statement ::= EXIT SEMI 
            {
              Stmt RESULT =null;
		 RESULT = new ExitSt(); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",29, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // statement ::= RETURN sq_return SEMI 
            {
              Stmt RESULT =null;
		int sqrleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int sqrright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		Expr sqr = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		 RESULT = new ReturnValueSt(sqr); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",29, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // statement ::= RETURN SEMI 
            {
              Stmt RESULT =null;
		 RESULT = new ReturnSt(); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",29, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // write_paramslst ::= write_paramslst COMMA write_expr 
            {
              List<Expr> RESULT =null;
		int wplleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int wplright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		List<Expr> wpl = (List<Expr>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		int weleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int weright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Expr we = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = append(wpl,we); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("write_paramslst",30, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // write_paramslst ::= COMMA write_expr 
            {
              List<Expr> RESULT =null;
		int weleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int weright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Expr we = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = add(we,nil); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("write_paramslst",30, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // write_params ::= LPAREN write_expr write_paramslst RPAREN 
            {
              List<Expr> RESULT =null;
		int weleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int weright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		Expr we = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		int wplleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int wplright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		List<Expr> wpl = (List<Expr>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		 RESULT = add(we,wpl); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("write_params",31, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // write_params ::= LPAREN write_expr RPAREN 
            {
              List<Expr> RESULT =null;
		int weleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int weright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		Expr we = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		 RESULT = add(we,nil); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("write_params",31, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // write_params ::= LPAREN RPAREN 
            {
              List<Expr> RESULT =null;
		 RESULT = nil; 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("write_params",31, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // write_expr ::= STRING_LITERAL 
            {
              Expr RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = new StringConst(str); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("write_expr",32, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // write_expr ::= expression 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = e; 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("write_expr",32, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expression ::= number 
            {
              Expr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Expr n = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = n; 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",33, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expression ::= lvalue 
            {
              Expr RESULT =null;
		int lvalleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int lvalright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Lvalue lval = (Lvalue)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = new LvalExp(lval); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",33, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expression ::= LPAREN expression RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		 RESULT = e; 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",33, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expression ::= MINUS expression 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = new UnOpExp("minus",e); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",33, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expression ::= NOT expression 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = new UnOpExp("not",e); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",33, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expression ::= expression PLUS expression 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = new BinOpExp("plus",e1,e2); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",33, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expression ::= expression MINUS expression 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = new BinOpExp("minus",e1,e2); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",33, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expression ::= expression TIMES expression 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = new BinOpExp("times",e1,e2); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",33, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expression ::= expression SLASH expression 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = new BinOpExp("slash",e1,e2); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",33, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expression ::= expression DIV expression 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = new BinOpExp("div",e1,e2); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",33, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expression ::= expression MOD expression 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = new BinOpExp("mod",e1,e2); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",33, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expression ::= expression OR expression 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = new BinOpExp("or",e1,e2); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",33, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expression ::= expression AND expression 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = new BinOpExp("and",e1,e2); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",33, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expression ::= expression GT expression 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = new BinOpExp("gt",e1,e2); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",33, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expression ::= expression LT expression 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = new BinOpExp("lt",e1,e2); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",33, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expression ::= expression EQ expression 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = new BinOpExp("eq",e1,e2); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",33, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expression ::= expression GEQ expression 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = new BinOpExp("geq",e1,e2); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",33, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expression ::= expression LEQ expression 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = new BinOpExp("leq",e1,e2); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",33, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expression ::= expression NEQ expression 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = new BinOpExp("neq",e1,e2); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",33, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expression ::= ID actual_params 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		int apleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int apright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		List<Expr> ap = (List<Expr>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = new CallExp(i,ap); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",33, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expression ::= ID record_inits 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		int risleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int risright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		List<Tuple2<String,Expr>> ris = (List<Tuple2<String,Expr>>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = new RecordExp(i,ris); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",33, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expression ::= ID array_inits 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		int aisleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int aisright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		List<Tuple2<Expr,Expr>> ais = (List<Tuple2<Expr,Expr>>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = new ArrayExp(i,ais); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",33, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // lvalue ::= ID 
            {
              Lvalue RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = new Var(i); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("lvalue",34, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // lvalue ::= lvalue LSQBRA expression RSQBRA 
            {
              Lvalue RESULT =null;
		int lvalleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).left;
		int lvalright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).right;
		Lvalue lval = (Lvalue)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		 RESULT = new ArrayDeref(lval,e); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("lvalue",34, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // lvalue ::= lvalue DOT ID 
            {
              Lvalue RESULT =null;
		int lvalleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int lvalright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		Lvalue lval = (Lvalue)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = new RecordDeref(lval,i); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("lvalue",34, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expression_lst ::= expression_lst COMMA expression 
            {
              List<Expr> RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		List<Expr> el = (List<Expr>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = append(el,e); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression_lst",35, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expression_lst ::= COMMA expression 
            {
              List<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = add(e,nil); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression_lst",35, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // actual_params ::= LPAREN expression expression_lst RPAREN 
            {
              List<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		List<Expr> el = (List<Expr>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		 RESULT = add(e,el); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("actual_params",36, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // actual_params ::= LPAREN expression RPAREN 
            {
              List<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		 RESULT = add(e,nil); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("actual_params",36, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // actual_params ::= LPAREN RPAREN 
            {
              List<Expr> RESULT =null;
		 RESULT = nil; 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("actual_params",36, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // record_init_lst ::= record_init_lst SEMI ID ASGN expression 
            {
              List<Tuple2<String,Expr>> RESULT =null;
		int rilleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)).left;
		int rilright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)).right;
		List<Tuple2<String,Expr>> ril = (List<Tuple2<String,Expr>>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = append(ril,add(i,add(e,nil))); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("record_init_lst",37, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // record_init_lst ::= SEMI ID ASGN expression 
            {
              List<Tuple2<String,Expr>> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = add(i,add(e,nil)); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("record_init_lst",37, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // record_inits ::= LCUBRA ID ASGN expression record_init_lst RCUBRA 
            {
              List<Tuple2<String,Expr>> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		int rilleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int rilright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		List<Tuple2<String,Expr>> ril = (List<Tuple2<String,Expr>>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		 RESULT = append(ril,add(i,add(e,nil))); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("record_inits",38, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-5)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // array_init_lst ::= array_init_lst COMMA array_init 
            {
              List<Expr> RESULT =null;
		int ailleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int ailright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		List<Expr> ail = (List<Expr>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		int aileft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int airight = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		List<Expr> ai = (List<Expr>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = append(ail,ai); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("array_init_lst",39, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // array_init_lst ::= COMMA array_init 
            {
              List<Expr> RESULT =null;
		int aileft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int airight = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		List<Expr> ai = (List<Expr>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = add(ai,nil); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("array_init_lst",39, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // sq_array_inits ::= array_init array_init_lst 
            {
              List<Expr> RESULT =null;
		int aileft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int airight = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		List<Expr> ai = (List<Expr>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		int ailleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int ailright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		List<Expr> ail = (List<Expr>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = append(ai,ail); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("sq_array_inits",40, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // sq_array_inits ::= array_init 
            {
              List<Expr> RESULT =null;
		int aileft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int airight = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		List<Expr> ai = (List<Expr>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = add(ai,nil); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("sq_array_inits",40, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // array_inits ::= LCUBRA sq_array_inits RCUBRA 
            {
              List<Tuple2<Expr,Expr>> RESULT =null;
		int sqileft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int sqiright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		List<Expr> sqi = (List<Expr>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		 RESULT = add(sqi,nil); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("array_inits",42, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // array_inits ::= LCUBRA RCUBRA 
            {
              List<Tuple2<Expr,Expr>> RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("array_inits",42, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // sq_array_init ::= expression OF 
            {
              List<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		 RESULT = add(e,nil); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("sq_array_init",41, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // array_init ::= sq_array_init expression 
            {
              List<Expr> RESULT =null;
		int saileft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int sairight = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		List<Expr> sai = (List<Expr>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = append(sai,e); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("array_init",43, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // array_init ::= expression 
            {
              List<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = add(e,nil); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("array_init",43, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // number ::= INTEGER_LITERAL 
            {
              Expr RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Integer il = (Integer)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = new IntConst(il); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("number",44, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // number ::= REAL_LITERAL 
            {
              Expr RESULT =null;
		int rlleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int rlright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Float rl = (Float)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = new RealConst(rl); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("number",44, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$PcatParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$PcatParser$do_action(
    int                        CUP$PcatParser$act_num,
    java_cup.runtime.lr_parser CUP$PcatParser$parser,
    java.util.Stack            CUP$PcatParser$stack,
    int                        CUP$PcatParser$top)
    throws java.lang.Exception
    {
              return CUP$PcatParser$do_action_part00000000(
                               CUP$PcatParser$act_num,
                               CUP$PcatParser$parser,
                               CUP$PcatParser$stack,
                               CUP$PcatParser$top);
    }
}

}
